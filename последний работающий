<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>IRON BANK POOLS</title>
  <script src="https://cdn.jsdelivr.net/npm/ethers@5.7.2/dist/ethers.umd.min.js"></script>
  <style>
    body { font-family:'Segoe UI',sans-serif; background:#121212; color:#e0e0e0; padding:20px; }
    h1 { text-align:center; color:#fff; margin-bottom:10px; }
    #wallet-status, #portfolio-summary, #credit-usage, #predicted-usage { text-align:center; margin:10px 0; font-weight:bold; }
    .button-group { text-align:center; margin-bottom:15px; }
    table { width:100%; border-collapse:collapse; background:#1e1e1e; margin-top:20px; }
    th, td { padding:12px 15px; border:1px solid #333; text-align:left; }
    th { background:#2c2c2c; }
    tr:nth-child(even) { background:#252525; }
    input { background:#2c2c2c; color:#e0e0e0; border:1px solid #444; border-radius:4px; padding:4px; width:80px; }
    .progress-container { background:#333; border-radius:4px; width:80%; height:12px; margin:4px auto; }
    .progress-bar { height:100%; width:0; border-radius:4px; transition:width .3s, background-color .3s; }
    .liquidity-value { color:#2ecc71; }
    .supply-apy, .pred-supply { color:yellow; }
    .borrow-apy, .pred-borrow { color:#e74c3c; }
    .your-lend, .your-borrow { color:#9b59b6; font-weight:bold; }
    button { background:#3b82f6; border:none; color:#fff; padding:6px 10px; margin:2px; border-radius:4px; cursor:pointer; }
    button:hover { background:#2563eb; }
  </style>
</head>
<body>
  <h1>IRON BANK POOLS</h1>
  <div id="wallet-status"></div>
  <div class="button-group">
    <button id="btn-connect">Connect Wallet</button>
    <button id="btn-disconnect">Disconnect Wallet</button>
    <button id="btn-refresh">Refresh Data</button>
    <button id="btn-preview-all">Preview All</button>
  </div>
  <div id="portfolio-summary">Portfolio: $0.00 | Net APY: 0% | Daily: $0.00 | Hourly: $0.00</div>
  <div id="credit-usage">Credit Usage: 0% of max<div class="progress-container"><div id="usage-bar" class="progress-bar"></div></div></div>
  <div id="predicted-usage">Predicted Usage: N/A<div class="progress-container"><div id="predicted-bar" class="progress-bar"></div></div></div>
  <table>
    <thead>
      <tr>
        <th>Name</th><th>Liquidity</th><th>Total Supply</th><th>Supply APY</th><th>Total Borrow</th><th>Borrow APY</th><th>Reserves</th><th>Utilization</th><th>Your Lend</th><th>Your Borrow</th><th>Actions</th>
      </tr>
    </thead>
    <tbody id="data-body"></tbody>
  </table>
  <div id="status"></div>
  <script>
    const blocksPerYear = 2628000;
    let provider, signer;
    const pools = [
      {name:'USDT',address:'0x48759F220ED983dB51fA7A8C0D2AAb8f3ce4166a',decimals:6,collateralFactor:0.90},
      {name:'DAI', address:'0x8e595470Ed749b85C6F7669de83EAe304C2ec68F',decimals:18,collateralFactor:0.80},
      {name:'USDC',address:'0x76Eb2FE28b36B3ee97F3Adae0C69606eeDB2A37c',decimals:6,collateralFactor:0.90},
      {name:'ETH', address:'0x41c84c0e2EE0b740Cf0d31F63f3B6F627DC6b393',decimals:18,collateralFactor:0.75}
    ];
    const state = { pools: {} };

    function setStatus(msg) { document.getElementById('status').innerText = msg; }
    function setWalletStatus(html) { document.getElementById('wallet-status').innerHTML = html; }
    function clearActions() { document.getElementById('data-body').innerHTML = ''; }

    async function connectWallet() {
      try {
        if (!window.ethereum) throw new Error('MetaMask not installed');
        provider = new ethers.providers.Web3Provider(window.ethereum);
        await provider.send('eth_requestAccounts', []);
        signer = provider.getSigner();
        const addr = await signer.getAddress();
        setWalletStatus(`<span style='color:#34d399'>Connected: ${addr.slice(0,6)}***${addr.slice(-4)}</span>`);
        loadPoolData();
      } catch (e) { setStatus('‚ùå ' + e.message); }
    }
    function disconnectWallet() {
      provider = signer = null;
      setWalletStatus('');
      clearActions();
      document.getElementById('portfolio-summary').innerText = 'Portfolio: $0.00 | Net APY: 0% | Daily: $0.00 | Hourly: $0.00';
      setStatus('');
    }

    async function loadPoolData() {
      if (!signer) { setStatus('‚ùå Connect wallet first'); return; }
      setStatus('üîÑ Loading‚Ä¶');
      clearActions();
      const abi = [
        'function getCash() view returns(uint256)','function totalBorrows() view returns(uint256)',
        'function totalReserves() view returns(uint256)','function borrowRatePerBlock() view returns(uint256)',
        'function supplyRatePerBlock() view returns(uint256)','function exchangeRateStored() view returns(uint256)',
        'function balanceOf(address)view returns(uint256)','function borrowBalanceStored(address)view returns(uint256)',
        'function interestRateModel() view returns(address)','function reserveFactorMantissa() view returns(uint256)' ];
      let totL=0, totB=0, totC=0, wS=0, wB=0;
      const tbody = document.getElementById('data-body');
      for (const p of pools) {
        try {
          const c = new ethers.Contract(p.address, abi, provider);
          const [cash, borrows, reserves, brRaw, srRaw, exRate, cBal, bBal, modelAddr, resFact] =
            await Promise.all([
              c.getCash(), c.totalBorrows(), c.totalReserves(),
              c.borrowRatePerBlock(), c.supplyRatePerBlock(),
              c.exchangeRateStored(), c.balanceOf(await signer.getAddress()),
              c.borrowBalanceStored(await signer.getAddress()),
              c.interestRateModel(), c.reserveFactorMantissa()
            ]);
          const brPB = parseFloat(ethers.utils.formatUnits(brRaw,18));
          const srPB = parseFloat(ethers.utils.formatUnits(srRaw,18));
          const borrowAPY = (1+brPB)**blocksPerYear -1;
          const supplyAPY = (1+srPB)**blocksPerYear -1;
          const totalSupply = cash.add(borrows).sub(reserves);
          const util = borrows.mul(10000).div(totalSupply).toNumber()/100;
          const usdL = parseFloat(ethers.utils.formatUnits(cBal.mul(exRate).div(ethers.BigNumber.from('1000000000000000000')),p.decimals));
          const usdB = parseFloat(ethers.utils.formatUnits(bBal,p.decimals));
          totL+=usdL; totB+=usdB; totC+=usdL*p.collateralFactor; wS+=usdL*supplyAPY; wB+=usdB*borrowAPY;
          state.pools[p.address] = { c, cash, borrows, reserves, brPB, srPB, supplyAPY, borrowAPY, util, modelAddr, resFact, decimals:p.decimals, collateralFactor:p.collateralFactor };
          const fmt = v => Number(ethers.utils.formatUnits(v,p.decimals)).toLocaleString(undefined,{maximumFractionDigits:2});
          const row = document.createElement('tr');
          row.innerHTML = `
            <td>${p.name}</td>
            <td class='liquidity-value'>${fmt(cash)}</td>
            <td>${fmt(totalSupply)}</td>
            <td class='supply-apy'>${(supplyAPY*100).toFixed(2)}% <em id='pred-supply-${p.address}'></em></td>
            <td>${fmt(borrows)}</td>
            <td class='borrow-apy'>${(borrowAPY*100).toFixed(2)}% <em id='pred-borrow-${p.address}'></em></td>
            <td>${fmt(reserves)}</td>
            <td>${util.toFixed(2)}%</td>
            <td class='your-lend'>${usdL.toLocaleString(undefined,{maximumFractionDigits:2})}</td>
            <td class='your-borrow'>${usdB.toLocaleString(undefined,{maximumFractionDigits:2})}</td>
            <td>
              <input id='supply-${p.address}' placeholder='Supply'/><button data-action='supply' data-pool='${p.address}'>Supply</button><br/>
              <input id='borrow-${p.address}' placeholder='Borrow'/><button data-action='borrow' data-pool='${p.address}'>Borrow</button><br/>
              <input id='repay-${p.address}' placeholder='Repay'/><button data-action='repay' data-pool='${p.address}'>Repay</button><br/>
              <input id='withdraw-${p.address}' placeholder='Redeem'/><button data-action='redeem' data-pool='${p.address}'>Redeem</button><br/>
              <button data-action='preview' data-pool='${p.address}'>Preview</button>
            </td>`;
          tbody.appendChild(row);
        } catch(e) { console.error(e); }
      }
      const net = totL? (wS-wB)/totL : 0;
      const daily = totL*net/365, hourly = daily/24;
      document.getElementById('portfolio-summary').innerText = `Portfolio: $${totL.toFixed(2)} | Net APY: ${(net*100).toFixed(2)}% | Daily: $${daily.toFixed(2)} | Hourly: $${hourly.toFixed(2)}`;
      updateUsage(totC? (totB/totC)*100:0, totC? (totB/totC)*100:0);
      setStatus('');
    }

    window.addEventListener('DOMContentLoaded', () => {
    document.getElementById('btn-connect').onclick = connectWallet;
    document.getElementById('btn-disconnect').onclick = disconnectWallet;
    document.getElementById('btn-refresh').onclick = loadPoolData;
    document.getElementById('btn-preview-all').onclick = () => {/* implement previewAll */};
    document.getElementById('data-body').addEventListener('click', async e => {
      const btn = e.target.closest('button[data-action]');
      if(!btn) return;
      const action = btn.dataset.action, pool = btn.dataset.pool;
      const valEl = document.getElementById(`${action==='redeem'?'withdraw':action}-${pool}`);
      const val = valEl ? valEl.value : '';
      if(['supply','borrow','repay','redeem'].includes(action) && !val) return alert('Enter amount');
      setStatus(`‚è≥ ${action.charAt(0).toUpperCase()+action.slice(1)}...`);
      try {
        const stats = state.pools[pool];
        const amt = ethers.utils.parseUnits(val, stats.decimals);
        if(action==='supply') {
          const c = stats.c;
          let underlying;
          try { underlying = await c.underlying(); } catch { underlying = '0xdAC17F958D2ee523a2206206994597C13D831ec7'; }
          const token = new ethers.Contract(underlying, ["function approve(address,uint256) returns(bool)"], signer);
          await token.approve(pool, amt);
          await c.mint(amt);
        } else if(action==='borrow') {
          await stats.c.borrow(amt);
        } else if(action==='repay') {
          const c = stats.c;
          let underlying;
          try { underlying = await c.underlying(); } catch { underlying = '0xdAC17F958D2ee523a2206206994597C13D831ec7'; }
          const token = new ethers.Contract(underlying, ["function approve(address,uint256) returns(bool)"], signer);
          await token.approve(pool, amt);
          await c.repayBorrow(amt);
        } else if(action==='redeem') {
          await stats.c.redeemUnderlying(amt);
        } else if(action==='preview') {
          /* preview logic */
        }
        setStatus(`‚úÖ ${action.charAt(0).toUpperCase()+action.slice(1)} done`);
        loadPoolData();
      } catch(err) { setStatus('‚ùå '+err.message); }
    });
  });
  </script>
</body>
</html>
